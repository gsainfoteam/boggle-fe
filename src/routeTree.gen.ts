/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as WriteImport } from './routes/write';
import { Route as UserImport } from './routes/user';
import { Route as RoommatePostImport } from './routes/roommatePost';
import { Route as PostImport } from './routes/post';
import { Route as MyProfileImport } from './routes/myProfile';
import { Route as LoginImport } from './routes/login';
import { Route as EditImport } from './routes/edit';
import { Route as IndexImport } from './routes/index';

// Create/Update Routes

const WriteRoute = WriteImport.update({
  id: '/write',
  path: '/write',
  getParentRoute: () => rootRoute,
} as any);

const UserRoute = UserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any);

const RoommatePostRoute = RoommatePostImport.update({
  id: '/roommatePost',
  path: '/roommatePost',
  getParentRoute: () => rootRoute,
} as any);

const PostRoute = PostImport.update({
  id: '/post',
  path: '/post',
  getParentRoute: () => rootRoute,
} as any);

const MyProfileRoute = MyProfileImport.update({
  id: '/myProfile',
  path: '/myProfile',
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const EditRoute = EditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/edit': {
      id: '/edit';
      path: '/edit';
      fullPath: '/edit';
      preLoaderRoute: typeof EditImport;
      parentRoute: typeof rootRoute;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/myProfile': {
      id: '/myProfile';
      path: '/myProfile';
      fullPath: '/myProfile';
      preLoaderRoute: typeof MyProfileImport;
      parentRoute: typeof rootRoute;
    };
    '/post': {
      id: '/post';
      path: '/post';
      fullPath: '/post';
      preLoaderRoute: typeof PostImport;
      parentRoute: typeof rootRoute;
    };
    '/user': {
      id: '/user';
      path: '/user';
      fullPath: '/user';
      preLoaderRoute: typeof UserImport;
    };
    '/roommatePost': {
      id: '/roommatePost';
      path: '/roommatePost';
      fullPath: '/roommatePost';
      preLoaderRoute: typeof RoommatePostImport;
      parentRoute: typeof rootRoute;
    };
    '/write': {
      id: '/write';
      path: '/write';
      fullPath: '/write';
      preLoaderRoute: typeof WriteImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/edit': typeof EditRoute;
  '/login': typeof LoginRoute;
  '/myProfile': typeof MyProfileRoute;
  '/post': typeof PostRoute;
  '/user': typeof UserRoute;
  '/roommatePost': typeof RoommatePostRoute;
  '/write': typeof WriteRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/edit': typeof EditRoute;
  '/login': typeof LoginRoute;
  '/myProfile': typeof MyProfileRoute;
  '/post': typeof PostRoute;
  '/user': typeof UserRoute;
  '/roommatePost': typeof RoommatePostRoute;
  '/write': typeof WriteRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/edit': typeof EditRoute;
  '/login': typeof LoginRoute;
  '/myProfile': typeof MyProfileRoute;
  '/post': typeof PostRoute;
  '/user': typeof UserRoute;
  '/roommatePost': typeof RoommatePostRoute;
  '/write': typeof WriteRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/edit' | '/login' | '/myProfile' | '/post' | '/roommatePost' | '/user' | '/write';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/edit' | '/login' | '/myProfile' | '/post' | '/user' | '/roommatePost' | '/write';
  id: '__root__' | '/' | '/edit' | '/login' | '/myProfile' | '/post' | '/user' | '/roommatePost' | '/write';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  EditRoute: typeof EditRoute;
  LoginRoute: typeof LoginRoute;
  MyProfileRoute: typeof MyProfileRoute;
  PostRoute: typeof PostRoute;
  UserRoute: typeof UserRoute;
  RoommatePostRoute: typeof RoommatePostRoute;
  WriteRoute: typeof WriteRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EditRoute: EditRoute,
  LoginRoute: LoginRoute,
  MyProfileRoute: MyProfileRoute,
  PostRoute: PostRoute,
  UserRoute: UserRoute,
  RoommatePostRoute: RoommatePostRoute,
  WriteRoute: WriteRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/edit",
        "/login",
        "/myProfile",
        "/post",
        "/user",
        "/roommatePost",
        "/write"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/edit": {
      "filePath": "edit.jsx"
    },
    "/login": {
      "filePath": "login.jsx"
    },
    "/myProfile": {
      "filePath": "myProfile.jsx"
    },
    "/post": {
      "filePath": "post.jsx"
    },
    "/user": {
      "filePath": "user.jsx"
    "/roommatePost": {
      "filePath": "roommatePost.jsx"
    },
    "/write": {
      "filePath": "write.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
